# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure('2') do |config|
  # Box Ubuntu Server 22.04 ARM64 compatible Apple Silicon
  # Option 1 (recommandée) : gyptazy/ubuntu22.04-arm64  
  # Option 2 : perk/ubuntu-2204-arm64
  # Option 3 : gyptazy/ubuntu24.04-server-arm64 (plus récent)
  config.vm.box = 'gyptazy/ubuntu22.04-arm64'
  
  # Configuration VMware Fusion pour Apple Silicon (version simplifiée)
  config.vm.provider 'vmware_fusion' do |vmware|
    vmware.memory = '2048'
    vmware.cpus = 2
    vmware.gui = false
    vmware.linked_clone = false
    # Configuration minimale pour ARM64
    vmware.vmx['virtualHW.version'] = '20'  # Version plus récente pour ARM64
    vmware.vmx['firmware'] = 'efi'
    # Désactivation complète des fonctionnalités graphiques problématiques
    vmware.vmx['svga.present'] = 'FALSE'
    vmware.vmx['svga.autodetect'] = 'FALSE'
    vmware.vmx['mks.enable3d'] = 'FALSE'
    vmware.vmx['RemoteDisplay.vnc.enabled'] = 'FALSE'
    # Configuration réseau simple
    vmware.vmx['ethernet0.virtualDev'] = 'e1000e'
    vmware.vmx['ethernet0.connectionType'] = 'nat'
  end

  # define manager nodes
  (1..3).each do |number|
    config.vm.define "m#{number}" do |node|
      node.vm.network 'private_network', ip: "192.168.99.20#{number}"
      node.vm.network 'forwarded_port', id: 'ssh', host: "820#{number}", guest: 22
      node.vm.hostname = "m#{number}"
      
      # Configuration spécifique par nœud pour VMware
      node.vm.provider 'vmware_fusion' do |vmware|
        vmware.vmx['displayName'] = "Manager-#{number}"
      end
    end
  end
  
  # define worker nodes
  (1..4).each do |number|
    config.vm.define "w#{number}" do |node|
      node.vm.network 'private_network', ip: "192.168.99.21#{number}"
      node.vm.network 'forwarded_port', id: 'ssh', host: "821#{number}", guest: 22
      node.vm.hostname = "w#{number}"
      
      # Configuration spécifique par nœud pour VMware
      node.vm.provider 'vmware_fusion' do |vmware|
        vmware.vmx['displayName'] = "Worker-#{number}"
      end
    end
  end
  
  # Installation de Docker compatible ARM64 et optimisations serveur
  config.vm.provision 'shell', inline: <<-SHELL
    # Mise à jour du système
    sudo apt-get update
    
    # Installation des dépendances essentielles uniquement
    sudo apt-get install -y \
      ca-certificates \
      curl \
      gnupg \
      lsb-release \
      apt-transport-https
    
    # Ajout de la clé GPG officielle de Docker
    sudo mkdir -p /etc/apt/keyrings
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
    
    # Ajout du repository Docker
    echo \
      "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
      $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
    
    # Installation de Docker Engine (version légère pour serveur)
    sudo apt-get update
    sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
    
    # Ajout de l'utilisateur vagrant au groupe docker
    sudo usermod -aG docker vagrant
    
    # Configuration Docker pour optimiser les ressources
    sudo mkdir -p /etc/docker
    sudo tee /etc/docker/daemon.json > /dev/null <<EOF
{
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "10m",
    "max-file": "3"
  },
  "storage-driver": "overlay2"
}
EOF
    
    # Démarrage et activation de Docker
    sudo systemctl start docker
    sudo systemctl enable docker
    
    # Installation des outils essentiels pour les démos (légers)
    sudo apt-get install -y tree jq curl wget htop
    
    # Installation de bat (version snap plus légère)
    sudo snap install bat
    
    # Suppression du message de bienvenue
    touch /home/vagrant/.hushlogin
    
    # Nettoyage pour économiser l'espace
    sudo apt-get autoremove -y
    sudo apt-get autoclean
    
    # Test rapide de Docker
    sudo docker run --rm hello-world
    
    # Affichage des informations système
    echo "=== Configuration système ==="
    echo "Hostname: $(hostname)"
    echo "RAM: $(free -h | grep '^Mem:' | awk '{print $2}')"
    echo "CPU: $(nproc) cores"
    echo "Docker version: $(docker --version)"
  SHELL
end
